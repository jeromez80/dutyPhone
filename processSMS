#!/usr/bin/env python

"""\
MC Modem Handler

Objectives:
1) Forward SMS to active destination number
2) Forward calls to active destinatino number (using USSD)
3) Listen for keywords to update active destination number

Obj1: Stores two types of destination number: duty number (gets all sms & calls), and supervisor number (subscribes to keywords or all sms).

Obj2: When destination number is updated, use USSD code to update call divert status.

Obj3: Support for keywords: "Takeover duty", "Sub <keyword>", "Unsub <keyword>", "Silence", "Alert", "Status", "Help"

Obj4: Poll a job folder for message. Sends them out where: first line contains destination, second line contains message
"""

from __future__ import print_function
from gsmmodem import exceptions
import logging, time, os, ConfigParser, datetime, signal, errno, sys

dConfig = ConfigParser.ConfigParser()
dConfig.read("config.ini")
POLLPATH = dConfig.get('SMS-Q', 'IncomingPath')
DESTPATH = dConfig.get('SMS-Q', 'CompletedPath')
SMSLOGFILE = dConfig.get('SMS-Q', 'SMSLogs')
PORT = dConfig.get('GSMmodem', 'Device')
BAUDRATE = dConfig.getint('GSMmodem', 'Baud')
SMSC_NUM = dConfig.get('GSMmodem', 'SMSC_NUM')
PIN = None # SIM card PIN (if any)
DUTYNUM = ''
SUPERVISORNUM = []
STAFFNUM = []
SILENTNUM = []
STATUS_ALL=4
pidfile = "processSMS.pid"

import MySQLdb
db = MySQLdb.connect(host="localhost", user="root", passwd="", db="smartMessage")
SQLCur = db.cursor() 

from gsmmodem.modem import GsmModem

def signal_handler(signal, frame):
	global pidfile
	os.unlink(pidfile)
        sys.exit(0)

def pid_exists(pid):
    """Check whether pid exists in the current process table.
    UNIX only.
    """
    if pid < 0:
        return False
    if pid == 0:
        # According to "man 2 kill" PID 0 refers to every process
        # in the process group of the calling process.
        # On certain systems 0 is a valid PID but we have no way
        # to know that in a portable fashion.
        raise ValueError('invalid PID 0')
    try:
        os.kill(pid, 0)
    except OSError as err:
        if err.errno == errno.ESRCH:
            # ESRCH == No such process
            return False
        elif err.errno == errno.EPERM:
            # EPERM clearly means there's a process to deny access to
            return True
        else:
            # According to "man 2 kill" possible error values are
            # (EINVAL, EPERM, ESRCH)
            raise
    else:
        return True

def loadDutyNumbers():
	global DUTYNUM, SUPERVISORNUM, STAFFNUM

#    dConfig= ConfigParser.RawConfigParser()
#    dConfig.read('config.ini')
#    DUTYNUM = dConfig.get('DutySystem', 'DutyNumber')

	global SQLCur
	SQLCur.execute("SELECT `current_duty_number` FROM `smartMessage`.`mmg_phone_numbers` WHERE `mmg_phone_numbers`.`id` = 1;")
	DUTYNUM = SQLCur.fetchone()[0]

	if DUTYNUM == '':
		print('Duty number is empty. Ignoring...')

	SQLCur.execute("SELECT * FROM `superviser_number`;")
	for row in SQLCur:
		if row[2] == "S":
			SUPERVISORNUM.append(row[1])
			print(u'Loaded supervisor number: {0}'.format(row[1]))
		elif row[2] == "D":
			STAFFNUM.append(row[1])
			print(u'Loaded staff number: {0}'.format(row[1]))
		else:
			print(u'Invalid entry in staff list: {0}'.format(row[1]))

def loadSupervisorKeywords(supnumber):
    kw = []
    print(u'Loading keywords for: {0}'.format(supnumber))
    try:
      with open(u'{0}.txt'.format(supnumber)) as f:
        for line in f:
          if line:
            kw.append(line.lower().strip())
    except IOError:
      print('Supervisor keyword file does not exist - no keywords.')
    print('Done loading keywords')
    return kw

def saveSupervisorKeywords(supnumber, kw):
    print(u'Loading keywords for: {0}'.format(supnumber))
    with open(u'{0}.txt'.format(supnumber), 'w+') as f:
      for item in kw:
        f.write("%s\n" % item.lower())
        print(item)
    print('Done saving keywords for %s' % supnumber)
    return True

def saveLastIncomingNumber(number):
	print('Saving incoming number for quick reply')
	global SQLCur,db
	SQLCur.execute("UPDATE `smartMessage`.`mmg_phone_numbers` SET `last_incoming_message` = '"+number+"' WHERE `mmg_phone_numbers`.`id` = 1;")
	db.commit()
	return True

def getLastIncomingNumber():
	print('Retrieving last incoming number for quick reply')
	global SQLCur
	SQLCur.execute("SELECT `last_incoming_message` FROM `smartMessage`.`mmg_phone_numbers` WHERE `mmg_phone_numbers`.`id` = 1;")
	number = SQLCur.fetchone()[0]
	return number

def processJobFile(filename):
	global POLLPATH, DESTPATH, modem, DUTYNUM
	lineno=1
	destno = ''
	msg = ''
	with open('%s%s' % (POLLPATH,filename)) as f:
		for line in f:
			if line:
				print(line.rstrip())
				if lineno==1:
					destno = line.strip()
					if destno == 'DUTYNUM':
						destno = DUTYNUM
					lineno += 1
				else:
					msg = '%s\n%s' % (msg,line)

	newfilename = datetime.datetime.now().strftime("%Y%m%d-%H%M%S") + '.txt'
	if (destno=="") or (msg==""):
		print('Empty or incomplete job file detected. Ignoring...')
		os.rename('%s%s' % (POLLPATH, filename), '%s%s' % (DESTPATH, newfilename))
		return
	if (destno=="GROUPCHAT"):
		print('Ignoring group chat job API')
		os.rename('%s%s' % (POLLPATH, filename), '%s%s' % (DESTPATH, newfilename))
		return

	print('Sending to %s -> %s' % (destno, msg.strip()))
	modem.waitForNetworkCoverage(10)
	safeSendSms(destno, msg.strip())
	print('Moving %s to %s' % ('%s%s' % (POLLPATH, filename), '%s%s'% (DESTPATH, newfilename)))
	os.rename('%s%s' % (POLLPATH, filename), '%s%s' % (DESTPATH, newfilename))

def generateWordList(kw):
    wordlist = ""
    for item in kw:
      wordlist = wordlist + ',' + item
    #Return text without first comma
    return wordlist[1:]

def changeDutyNumber(sms):
    global DUTYNUM, SILENTNUM, modem
    oldDutyNum = DUTYNUM
    DUTYNUM = sms.number

    global SQLCur,db
    SQLCur.execute("UPDATE `smartMessage`.`mmg_phone_numbers` SET `current_duty_number` = '"+sms.number+"' WHERE `mmg_phone_numbers`.`id` = 1;")
    db.commit()

    modem.waitForNetworkCoverage(10)
    safeSendSms(DUTYNUM, u'Thank you, your number {0} has been registered as the duty phone. Good luck!'.format(DUTYNUM))
    time.sleep(1)
    modem.setForwarding(0, 3, DUTYNUM)
    time.sleep(2)
    response = modem.setForwarding(0, 1, DUTYNUM)
    time.sleep(2)
    print(u'Duty number is now {0} - {1}'.format(DUTYNUM, response))
    modem.waitForNetworkCoverage(10)
    safeSendSms(oldDutyNum, u'Woohoo! {0} has just taken over the duty from you. You will no longer receive alerts or calls.'.format(DUTYNUM))
    print(u'Old duty number sent relief message {0}'.format(oldDutyNum))

def safeSendSms(number, sms):
	global modem, SQLCur, db
        SQLCur.execute("INSERT INTO `smartMessage`.`messages` VALUES (NULL, NOW(), 'MODEM', %s, %s)",(number,sms))
	db.commit()

	if len(sms) <= 160:
		try:
			modem.sendSms(number, sms)
		except Exception as err:
			errorCode = err.args
			print('Error received in sending sms. Terminating... CMS Code: %s' % errorCode)
			#Should we exit or return false?
			sys.exit("CMS Error")
		return True
	text = sms
	count = 1
	while len(text) > 0:
		print('Sending as long sms... part %i=%s' % (count,text[:150]))
		try:
			modem.sendSms(number, text[:150])
		except Exception as err:
			errorCode = err.args
			print('Error received in sending sms (skipping multipart chunk). CMS Code: %s' % errorCode)
		time.sleep(3)
		count = count + 1
		text = text[150:]

def handleSms(sms):
    global STAFFNUM, SUPERVISORNUM, DUTYNUM, SILENTNUM, SQLCur, db, modem
    print(u'== SMS message received ==\nFrom: {0}\nTime: {1}\nMessage:\n{2}\n'.format(sms.number, sms.time, sms.text))
    try:
        SQLCur.execute("INSERT INTO `smartMessage`.`messages` VALUES (NULL, NOW(), %s, 'MODEM', %s)",(sms.number,sms.text))
        db.commit()
    except MySQLdb.Error, e:
        try:
            print("MySQL Error [%d]: %s" % (e.args[0], e.args[1]))
        except IndexError:
            print("MySQL Error: %s" % str(e))
    if sms.number in STAFFNUM or sms.number in SUPERVISORNUM:
      keyword = sms.text.lower().split()[0]
      #============ TAKEOVER DUTY ===============
      if keyword == 'takeover':
        changeDutyNumber(sms)
      #============ GET HELP  ===============
      elif keyword == 'help':
        safeSendSms(sms.number, 'takeover=Start duty\nreply <msg>=Reply msg to last sender\nmsg <num> <msg>=Send msg to num\nstatus=Check status\nsilence <n>=No alert for n hours\nsub <kw>=Get alerts matching kw\nunsub <kw>=Unsub kw\nmykw=List kw')
      #============ REPLY LAST MSG ===============
      elif keyword == 'reply':
        dmsg = sms.text.split(' ', 1)[1]
        print('Replying message to %s.' % getLastIncomingNumber())
        modem.waitForNetworkCoverage(10)
        safeSendSms(getLastIncomingNumber(), dmsg)
        time.sleep(3)
        safeSendSms(sms.number, 'Your message to %s has been sent.' % (getLastIncomingNumber()))
      #============ FORWARDING MSG ===============
      elif keyword == 'msg':
        dnum = sms.text.split()[1]
        dmsg = sms.text.split(' ', 2)[2]
        if (dnum[:3] != '+65'):
          safeSendSms(sms.number, 'Your destination number must begin with +65. Message not sent, pls try again.')
        elif (len(dnum) != 11):
          safeSendSms(sms.number, 'Your destination number is not valid. Message not sent, pls try again.')
        else:
          print('Forwarding message to %s.' % (dnum))
          safeSendSms(dnum, dmsg)
          time.sleep(3)
          safeSendSms(sms.number, 'Your message to %s has been sent.' % (dnum))
      #============ SILENCE n HOURS ===============
      elif keyword == 'silence' or keyword == 'silent':
        if sms.number == DUTYNUM:
          safeSendSms(sms.number, 'You are the duty phone and alerts cannot be silenced. :p')
        elif sms.number in SILENTNUM:
          safeSendSms(sms.number, 'You have already disabled any incoming alerts.')      
        else:
          SILENTNUM.append(sms.number)
          safeSendSms(sms.number, 'You will NOT be notified of incoming alerts. Reply "alert" to re-enable alerts.')
      #============ RE-ENABLE ALERTS ===============
      elif keyword == 'alert':
        if sms.number in SILENTNUM:
          SILENTNUM.remove(sms.number)
          safeSendSms(sms.number, 'You will be notified of incoming alerts.')
        else:
          safeSendSms(sms.number, 'You are already being notified of incoming alerts.')      
      #============ CHECK STATUS ===============
      elif keyword == 'status':
        v1='Supervisor' if sms.number in SUPERVISORNUM else 'Engineer'
        v2='No' if sms.number in SILENTNUM else 'Yes'
        kw = loadSupervisorKeywords(sms.number)
        v3=generateWordList(kw)
        safeSendSms(sms.number, u'Role: {0}\nAlerts: {1}\nOn-duty: {3}\nKeywords: {2}'.format(v1,v2,v3,DUTYNUM))      
      #============ SUBSCRIBE KW ===============
      elif keyword == 'sub':
        stafflevel='Supervisor' if sms.number in SUPERVISORNUM else 'Engineer'
        if stafflevel=='Engineer':
          safeSendSms(sms.number, 'Sorry - feature not available to you')
        else:
          kw = loadSupervisorKeywords(sms.number)
          newkw = sms.text.lower().split()[1]
          kw.append(newkw)
          saveSupervisorKeywords(sms.number, kw)
          safeSendSms(sms.number, u'Added keyword: {0}\nSub:{1}'.format(newkw,generateWordList(kw)))
      #============ GET LIST OF KW ===============
      elif keyword == 'mykw':
        stafflevel='Supervisor' if sms.number in SUPERVISORNUM else 'Engineer'
        if stafflevel=='Engineer':
          safeSendSms(sms.number, 'Sorry - feature not available to you')
        else:
          kw = loadSupervisorKeywords(sms.number)
          safeSendSms(sms.number, u'Your keywords:\n{0}'.format(generateWordList(kw)))
      #============ UNSUB KW ===============
      elif keyword == 'unsub':
        stafflevel='Supervisor' if sms.number in SUPERVISORNUM else 'Engineer'
        if stafflevel=='Engineer':
          safeSendSms(sms.number, 'Sorry - feature not available to you')
        else:
          kw = loadSupervisorKeywords(sms.number)
          delkw = sms.text.lower().split()[1]
          if delkw in kw:
            kw.remove(delkw)
            saveSupervisorKeywords(sms.number, kw)
            safeSendSms(sms.number, u'Removed: {0}\nSub:{1}'.format(delkw,generateWordList(kw)))
          else:
            safeSendSms(sms.number, u'You are not subscribed to {0}\nSub:{1}'.format(delkw,generateWordList(kw)))
      #============ INVALID COMMAND ===============
      else:
        safeSendSms(sms.number, 'Sorry I do not understand your message. Try "help" for assistance.')
    else: #NOT FROM STAFF, forward it!
      #NOTE: Need to add in timestamp and originating number. Need to cater for long SMS by breaking it into two.
      saveLastIncomingNumber(sms.number)
      print(u'Sending SMS to duty number: {0} - {1}'.format(DUTYNUM, sms.text))
      try:
        modem.waitForNetworkCoverage(30)
        safeSendSms(DUTYNUM, u'[From: {0}]\n{1}'.format(sms.number,sms.text))
      except:
        time.sleep(5)
        print('Exception when sending out message. Trying again...')
        safeSendSms(DUTYNUM, u'[From: {0}]\n{1}'.format(sms.number,sms.text))

      #ONLY supervisors have keyword feature
      for supervisor in SUPERVISORNUM:
        time.sleep(3)
        if supervisor in SILENTNUM:
          print(u'Supervisor {0} is on silent mode.'.format(supervisor))
        elif supervisor == DUTYNUM:
          print(u'Supervisor {0} is on duty and already sent the message.'.format(supervisor))
        else: #OK, passed all the checks. Now check the supervisor filter.
          kw = loadSupervisorKeywords(supervisor)
          if '*all' in kw:
            print(u'Matched *ALL - Copying to supervisor {0}'.format(supervisor))
            safeSendSms(supervisor, u'[From: {0}]\n{1}'.format(sms.number,sms.text))
          else:
            print('Checking keyword match')
            match = 0
            smslower = sms.text.lower()
            for line in  kw:
              line = line.lower()
              print(u'Match {0}?'.format(line))
              if line in smslower and match == 0:
                safeSendSms(supervisor, u'[From: {0}]\n{1}'.format(sms.number,sms.text))
                print(u'Matched '.format(line))
                match = 1
            if match == 0:
              print(u'No match. Ignoring alert for {0}'.format(supervisor))
    print('Completed processing of incoming SMS...')
    
def main():

    pid = str(os.getpid())

    if os.path.isfile(pidfile):
        with open(pidfile, 'r') as f:
            curpid=int(f.read().strip())
        if pid_exists(curpid):
            sys.exit("Process exists. Exiting...")
        else:
            print("%s exists, but process is dead. Creating now process file." % pidfile)
    file(pidfile, 'w+').write(pid)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    global modem
    print('Initializing modem...')
    # Uncomment the following line to see what the modem is doing:
    #logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.DEBUG)
    #logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)
    modem = GsmModem(PORT, BAUDRATE, smsReceivedCallbackFunc=handleSms)
    #Need to check whether the port was available. if not available ,may need to reboot the appliance?
    modem.smsTextMode = False 
    try:
        modem.connect(PIN)
    except:
        print("Cannot connect to modem. Terminating.")
	sys.exit(0)
    modem.smsc = SMSC_NUM
    time.sleep(1)
    try:
        modem.checkForwarding(0)
    except:
        print('Error raised in checking forwarding details')
    loadDutyNumbers()
    print(u'Current duty number is: {0}'.format(DUTYNUM))
    
    #CHECK SMS LIST
    messageList = modem.listStoredSms(STATUS_ALL, 'MT', True)
    messageList.extend(modem.listStoredSms(STATUS_ALL, 'SM', True))
    messageList.extend(modem.listStoredSms(STATUS_ALL, 'SR', True))
    messageList.extend(modem.listStoredSms(STATUS_ALL, None, True))
    for rSms in messageList:
      try:
          print (u'{0} - {1} :: {2}'.format(rSms.time, rSms.number,  rSms.text))
          SQLCur.execute("INSERT INTO `smartMessage`.`messages` VALUES (NULL, NOW(), %s, 'MODEM (Offline)', %s)",(rsms.number,rsms.text))
          handleSms(rSms)
      except:
          print('Ooops, error in printing/handling message')

    print('Waiting for SMS message...')    
    print(u'Signal strength is {0}% on {1} ({2}). IMEI {3}'.format(modem.signalStrength, modem.networkName, modem.imsi, modem.imei))
    try:
	while 1:
		qMsgs = os.listdir(POLLPATH)
		for qFile in qMsgs:
			print('Found job file: %s' % qFile)
			processJobFile(qFile)
	        modem.rxThread.join(5) # Specify a (huge) timeout so that it essentially blocks indefinitely, but still receives CTRL+C interrupt signal
    finally:
        modem.close();

if __name__ == '__main__':
    main()
