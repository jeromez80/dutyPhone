#!/usr/bin/env python
import ConfigParser, os, errno, MySQLdb
import asyncore, signal
import mailbox, chardet

def signal_handler(signal, frame):
	global pidfile
	os.unlink(pidfile)
        exit(0)

def pid_exists(pid):
    """Check whether pid exists in the current process table.
    UNIX only.
    """
    if pid < 0:
        return False
    if pid == 0:
        # According to "man 2 kill" PID 0 refers to every process
        # in the process group of the calling process.
        # On certain systems 0 is a valid PID but we have no way
        # to know that in a portable fashion.
        raise ValueError('invalid PID 0')
    try:
        os.kill(pid, 0)
    except OSError as err:
        if err.errno == errno.ESRCH:
            # ESRCH == No such process
            return False
        elif err.errno == errno.EPERM:
            # EPERM clearly means there's a process to deny access to
            return True
        else:
            # According to "man 2 kill" possible error values are
            # (EINVAL, EPERM, ESRCH)
            raise
    else:
	return True

def writeMsgToDb(destCty, destNum, msg):
	global DBHOST, DBUSER, DBPASS, DBNAME
	db = MySQLdb.connect(host=DBHOST, user=DBUSER, passwd=DBPASS, db=DBNAME)
	SQLCur = db.cursor()
	SQLCur.execute("INSERT INTO `IncomingEmail` (`Email_ID`, `DBTimestamp`, `Timestamp`, `MsgFrom`, `MsgTo`, `Dest_CtyCode`, `Dest_Number`, `Message`, `Processed`) VALUES (NULL, CURRENT_TIMESTAMP, NOW(), 'MsgFrom', 'MsgTo', %s, %s, %s, '1')", (destCty, destNum, msg))
	SQLCur.execute("INSERT INTO `OutMessageQueue` (`Job_ID`, `Job_Time`, `Job_Type`, `Dest_CtyCode`, `Dest_Number`, `Dest_Message`) VALUES (NULL, CURRENT_TIMESTAMP, 'SMS', %s, %s, %s)", (destCty, destNum, msg))
	db.commit()
	return

def getMailDir():
	global DBHOST, DBUSER, DBPASS, DBNAME
	db = MySQLdb.connect(host=DBHOST, user=DBUSER, passwd=DBPASS, db=DBNAME)
	SQLCur = db.cursor()
	SQLCur.execute("SELECT `Config_Value` FROM `ConfigData` WHERE `Config_Key` = 'SMTP_MailDir';")
	maildir=SQLCur.fetchone()
	if maildir:
		return maildir[0]
	else:
		return '/root/Maildir/'

def get_plaintext(msg):
	text = ""
	if msg.is_multipart():
		html = None
		for part in msg.get_payload():
			if part.get_content_charset() is None:
				charset = chardet.detect(str(part))['encoding']
			else:
				charset = part.get_content_charset()
			if part.get_content_type() == 'text/plain':
				text = unicode(part.get_payload(decode=True),str(charset),"ignore").encode('utf8','replace')
			if part.get_content_type() == 'text/html':
				html = unicode(part.get_payload(decode=True),str(charset),"ignore").encode('utf8','replace')
			if part.get_content_type() == 'multipart/alternative':
				for subpart in part.get_payload():
					if subpart.get_content_charset() is None:
						charset = chardet.detect(str(subpart))['encoding']
					else:
						charset = subpart.get_content_charset()
					if subpart.get_content_type() == 'text/plain':
						text = unicode(subpart.get_payload(decode=True),str(charset),"ignore").encode('utf8','replace')
					if subpart.get_content_type() == 'text/html':
						html = unicode(subpart.get_payload(decode=True),str(charset),"ignore").encode('utf8','replace')
		if html is None:
			return text.strip()
		else:
			return html.strip()
	else:
		#text = unicode(msg.get_payload(decode=True),msg.get_content_charset(),'ignore').encode('utf8','replace')
		text = msg.get_payload(decode=True)
		return text.strip()

global DBHOST, DBUSER, DBPASS, DBNAME

pid = str(os.getpid())
pidfile = "mail2msg.pid"

if os.path.isfile(pidfile):
    with open(pidfile, 'r') as f:
        curpid=int(f.read().strip())
    if pid_exists(curpid):
        print("%s already exists, exiting" % pidfile)
        exit()
    else:
        print("%s exists, but process is dead. Creating now process file." % pidfile)
file(pidfile, 'w+').write(pid)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

dConfig = ConfigParser.ConfigParser()
dConfig.read("/etc/SmartMessage.conf")
DBHOST = dConfig.get('DB', 'DBHost')
DBUSER = dConfig.get('DB', 'DBUser')
DBPASS = dConfig.get('DB', 'DBPass')
DBNAME = dConfig.get('DB', 'DBName')

MAILDIR = getMailDir()

print "Checking mail folder at",MAILDIR

mbox = mailbox.Maildir(MAILDIR, None)
i=1
for key in mbox.keys():
	message = mbox.get_message(key)
	plainmessage = get_plaintext(message)
	if message['subject'][0]=='+':
		destCty = message['subject'][1:3]		#Country code to send to
		destNum = message['subject'][3:]		#Number to send to
	else:
		destCty = '65'
		destNum = '93822131'
	print i
	print "from: ",message['from']
	print "subject: ",message['subject']
	print "key: ",key
	print "message: \n\n",plainmessage
	writeMsgToDb(destCty, destNum, plainmessage)
	mbox.discard(key)
	print "\nMSG DELETED OK\n"
	print "\n\n**********************"
	i+=1

